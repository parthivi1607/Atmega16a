/*
 * SPIGameMaster.c
 *
 * Created: 2/4/2019 6:21:50 PM
 * Author : DELL
 */ 

#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <stdlib.h>

uint8_t data,rec;
int i,flag=0;
int lastButton=0;
int currentButton=0;

int debounce(int last)
{
	int current = ((PIND & (1<<PIND7))>>PIND7);
	if(current != last)
	{
		_delay_ms(5);
		current = ((PIND & (1<<PIND7))>>PIND7);
	}
	return current;
}

void button()
{
	currentButton = debounce(lastButton);
	if(currentButton==0 && lastButton==1)
	{
		SPI_MasterTransmit(0b00000011);
		flag=1;
	}
	lastButton=currentButton;
}

void blink(int x)
{
	i=1;
	while(i<=x)
	{
		PORTC |= 1<<PINC0;
		_delay_ms(100);
		PORTC &= ~(1<<PINC0);
		_delay_ms(100);
		i++;
	}
}

void SPI_MasterInit()
{
	DDRB = (1<<PINB5) | (1<<PINB7) | (1<<PINB4); //output
	DDRB &= ~(1<<PINB6); //input
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0) | (1<<DORD); //enable SPI
}

void SPI_MasterTransmit(uint8_t data)
{
	PORTB &= ~(1<<PINB4); //pulling SS low
	if(data == 0b00000011) blink(1);
	SPDR = data; //start transmission
	while(!(SPSR & (1<<SPIF))); //wait for transmission to complete
	PORTB |= (1<<PINB4);
}

void SPI_SlaveInit()
{
	//MISO output, others input
	DDRB |= (1<<PINB6);
	DDRB &= ~(1<<PINB5);
	DDRB &= ~(1<<PINB7);
	DDRB &= ~(1<<PINB4);
	SPCR = (1<<SPE) | (1<<SPR0) | (1<<DORD); //enable SPI
}

uint8_t SPI_SlaveReceive()
{
	while(!(SPSR & (1<<SPIF))); //wait for receive complete
	rec = SPDR;
	if(rec == 0b00000011) 
	{
		blink(4);
		flag=0;
	}
	return rec;
}

int main(void)
{
	DDRC |= 1<<PINC0; //led output
	PORTC &= ~(1<<PINC0); //led off
	DDRD &= ~(1<<PIND7); //switch input
	PORTD |= 1 << PIND7; //set to high

	while (1)
	{
		if(flag==0)
		{
			
			SPI_MasterInit();
			button();
		}
		if(flag==1)
		{
			SPI_SlaveInit();
			data = SPI_SlaveReceive();
			//PORTC &= ~(1<<PINC0);
			
		}
	}
}