/*
 * SPIMasterGame.c
 *
 * Created: 2/8/2019 8:31:14 PM
 * Author : DELL
 */ 

#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <stdlib.h>

uint8_t data,rec=0;
int i,flag=0;
int lastButton=0;
int currentButton=0;

int debounce(int last)
{
	int current = ((PIND & (1<<PIND7))>>PIND7);
	if(current != last)
	{
		_delay_ms(5);
		current = ((PIND & (1<<PIND7))>>PIND7);
	}
	return current;
}

void blink(int x)
{
	i=1;
	while(i<=x)
	{
		PORTC ^= 1<<PINC0;
		_delay_ms(100);
		PORTC ^= (1<<PINC0);
		_delay_ms(100);
		i++;
	}
}

void SPI_MasterInit()
{
	DDRB = (1<<PINB5) | (1<<PINB7) | (1<<PINB4); //output
	DDRB &= ~(1<<PINB6); //input
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<DORD) | (1<<SPR0) | (1<<CPHA); //enable SPI
}

uint8_t SPI_MasterReceive()
{
	while(!(SPSR & (1<<SPIF))); //wait for receive complete
	rec = SPDR;
	if(rec == 0b00001110)
	{
		blink(4);
	}
	return rec;
}

void SPI_MasterTransmit(uint8_t x)
{
	PORTB &= ~(1<<PINB4); //pulling SS low
	if(x == 0b00001111) blink(1);
	SPDR = x; //start transmission
	while(!(SPSR & (1<<SPIF))); //wait for transmission to complete
	PORTB |= (1<<PINB4);
	//_delay_ms(1);
}

void button()
{
	currentButton = debounce(lastButton);
	if(currentButton==0 && lastButton==1)
	{
		SPI_MasterTransmit(0b00001111);
	}
	else
	{
		SPI_MasterTransmit(0b00000000);
		data=SPI_MasterReceive();
	}
	lastButton=currentButton;
}

int main(void)
{
    DDRC |= 1<<PINC0;
    PORTC &= ~(1<<PINC0);
    DDRD &= ~(1<<PIND7); //switch input
    PORTD |= 1 << PIND7; //set to high
	
	SPI_MasterInit();
	
	while (1) 
    {
		button();
    }
}

